// Code generated by go-bindata.
// sources:
// client.gotmpl
// router.gotmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xcd\x52\xdb\x30\x10\x3e\xdb\x4f\xb1\xcd\x01\x6c\xc6\x91\xef\x74\x38\x74\xa0\x07\x66\x20\x61\x5a\xfa\x00\xc2\xde\x28\x2a\x8e\xd6\xac\x24\x0c\x63\xfc\xee\x1d\x59\x8e\xcb\x4f\x66\x4a\x0f\x19\x29\xeb\xdd\xfd\xfe\x54\x96\x70\xb1\x86\xd5\xfa\x16\xbe\x5f\x5c\xde\x9e\xc2\x79\xa3\xd1\x38\xe8\xa4\x05\xe9\x1d\x29\x34\xc8\xd2\x61\x0d\x1b\xa6\x1d\x1c\xf7\xbd\x58\xc9\x1d\x0e\xc3\x71\xda\xca\xea\x5e\x2a\x84\xbe\x17\x37\xf1\x3a\x0c\x69\xaa\x77\x2d\xb1\x83\x2c\x4d\x16\x15\x19\x87\x4f\x6e\x91\x26\x0b\x34\x15\xd5\xda\xa8\xf2\xb7\x25\xb3\x48\xd3\x44\x76\x96\xf1\x01\x16\x4a\xbb\xad\xbf\x13\x15\xed\x4a\xd9\xd9\xf0\x5b\xda\xfa\x7e\xa9\x68\xfc\xcb\xf8\xe0\xd1\x86\x0d\xda\x3c\xd2\x3d\xf2\x9b\x01\xac\xad\xc3\xa6\x29\x1b\xb9\xbb\xab\xe5\x72\x6a\x09\x70\x8a\x48\x35\x28\x14\x35\xd2\x28\x41\xac\xca\x96\xc9\xd1\x9d\xdf\x94\x33\x93\xb1\x12\xe9\xe4\x69\xdf\x2f\x81\xa5\x51\x08\xe2\x27\xf2\xa3\xae\x46\x2d\xee\xb9\xc5\xbd\x21\xda\x38\xe4\x8d\xac\x10\xfa\x34\x79\xd5\x7e\x8d\x6e\x4b\xf5\x30\x84\xe2\x64\x4d\x36\x09\x17\xe7\xf1\x2c\xe0\xa4\xef\xc5\xa5\x69\xbd\xbb\x7d\x6e\xf1\x85\xb7\x76\x18\x0a\x10\x42\x44\x17\xc4\xba\x75\x9a\x4c\x0e\x59\xe8\x5b\x7b\xf7\xae\x11\x99\x89\xf3\x88\x8a\x26\x60\xed\xb9\x55\x91\x9b\x75\xec\x2b\xf7\x2f\x62\x2f\x8e\xae\xa8\x43\x1e\x06\x00\x38\x99\xdc\x12\x97\xf1\x7c\xb7\x7d\xe3\x4d\x05\x2b\xec\xa2\xf8\x4c\xc3\xbe\xfd\x6a\xf4\x7a\x1a\x2a\x40\xb2\x09\xe8\xda\xa8\x02\xbc\xd9\x49\xb6\x5b\xd9\x20\x43\x98\xcf\x82\xb9\xe2\x87\xec\xae\xd1\x5a\xa9\x30\x9f\x84\xec\x1d\xed\xd3\x84\xd1\x79\x36\x70\x14\x75\xf4\x69\x72\x58\xc0\x47\x05\xa7\x00\x33\xa5\x15\x76\x99\x1e\xa9\x14\x73\xed\x9b\xbd\x61\xaa\xb0\xf6\x8c\xd9\x62\x0e\x66\xf1\x86\x64\x9e\x17\x13\x60\x94\x9d\x04\xe5\x87\xf0\xa3\x1b\x59\x05\x27\x91\x67\x0e\xaf\xa2\x76\x4f\xf0\x21\xee\xf0\xb2\x0f\x46\x4e\xad\xb3\xff\x9b\x7b\xf0\xa9\x95\xcf\x0d\xc9\x7a\x2c\xc1\xe9\x19\xcc\x6f\x57\x5c\x47\x35\x19\xe3\x43\x9e\x26\x7a\x33\x76\x7c\x39\x03\xa3\x9b\x30\xb8\x77\xd8\xe8\x66\x1c\x0e\x22\x13\xb6\xed\xbc\xa9\x12\x1f\xbc\x9d\x9e\x44\x90\x56\xc0\x8c\x1c\xa8\x0b\x21\x3e\x0d\x42\xde\x85\xfd\x47\x07\x94\xf5\xc3\xbc\xe4\x8d\x96\x5f\xfb\x6c\xb2\x91\x21\x79\x97\x7f\xfd\x94\x9e\x58\x23\xef\x8a\xf0\x61\x4a\x31\x86\xfa\xf7\xf6\x27\x00\x00\xff\xff\xe8\xb4\xea\xf3\xe9\x04\x00\x00")

func clientGotmplBytes() ([]byte, error) {
	return bindataRead(
		_clientGotmpl,
		"client.gotmpl",
	)
}

func clientGotmpl() (*asset, error) {
	bytes, err := clientGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client.gotmpl", size: 1257, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x41\x4f\xdb\x30\x14\x3e\xdb\xbf\xe2\xad\x07\x88\x51\x70\xee\x20\x4e\x83\x69\x48\x6b\x99\x18\xdb\x0e\xd3\x0e\x4e\xf2\x9a\x66\xa4\x76\x70\x9c\x96\xca\xf8\xbf\x4f\x8e\x9d\x74\x50\xd0\x34\x69\x87\xaa\xd6\x97\xe7\xef\xfb\xde\xf7\xfc\xb2\x0c\x2e\x6f\x60\x71\x73\x07\x57\x97\xd7\x77\x67\x70\xab\x7a\x83\x1a\xb6\xa2\x03\xd1\x1b\x55\xa1\x44\x2d\x0c\x96\xb0\xd4\x6a\x0d\xc7\xd6\xf2\x85\x58\xa3\x73\xc7\xb4\x15\xc5\xbd\xa8\x10\xac\xe5\x9f\xc3\xd1\x39\x4a\xeb\x75\xab\xb4\x81\x84\x92\x59\xa1\xa4\xc1\x47\x33\xa3\x64\x86\xb2\x50\x65\x2d\xab\xec\x57\xa7\xe4\x8c\x52\xa2\x83\xcc\xac\xaa\xcd\xaa\xcf\x79\xa1\xd6\x19\x96\x9d\xc1\xa6\xc9\x1a\xb1\xce\x4b\x71\x1a\x2a\xfc\xe5\x4a\xa9\xaa\x41\x5e\xa9\x46\xc8\x8a\x2b\x5d\x65\xad\x56\x46\xe5\xfd\x32\x9b\x78\x07\x24\x90\x33\x6a\xad\x16\xb2\x42\xe0\x5f\x50\x6f\xea\xc2\xfb\x32\xbb\x16\x61\x23\x9a\xba\x14\x46\x69\xa8\xa5\x41\xbd\x14\x05\x82\xa5\xe4\x5b\x80\x31\x61\x80\x5a\x2b\x4d\x1d\x0d\xf5\x1f\x85\x2c\x1b\x7c\x51\x6d\xed\x29\x44\xfa\x39\x9a\x95\x2a\x9d\xf3\x60\x8c\x25\x89\x4d\xf3\xf7\xe1\x3f\x85\x13\x6b\xf9\xb5\x6c\x7b\x73\xb7\x6b\xf1\x49\xaf\x3a\xe7\x18\x24\x1e\xbd\xe9\xcd\x33\x38\x0d\xf2\x2c\x68\xa0\xf4\xcc\xa3\x95\x38\x96\xce\xe8\xbe\x30\xde\xc6\x49\xc8\x87\x87\x0f\xbe\x6e\xd9\xcb\x02\x16\xb8\x0d\x48\xb2\x8a\xe6\x63\x13\x29\xac\x85\xee\x56\xc2\x43\xbe\x32\x09\x5a\x90\xfc\xf8\x99\xef\x0c\x8e\xda\x0c\x4e\xa2\x94\x9d\x86\x74\x76\x01\x51\x6c\x81\xdb\x24\x1e\xe7\x81\xed\xca\xdf\xea\xbe\xd7\x66\x95\x4c\xfc\x8c\xbd\x91\xd2\x9f\x96\x93\xd9\x94\xd9\x2c\x85\x78\x7e\x32\xea\x93\xda\xa2\x76\x6e\xb4\xcf\xa7\x2a\xf6\x2c\x17\xa2\xd1\xf4\x5a\xc2\x51\x70\x6b\x29\x21\xe1\x74\x16\xbd\xa6\x94\xf8\xf4\x5e\xf3\x11\x92\x7a\x53\x32\xc4\xf3\x1f\xe6\xc8\xc6\xd8\xc6\x77\x64\x27\xdb\xcf\x3f\x7c\xf0\x82\x41\xd5\x3c\xc2\x81\xb2\xc6\x07\xf0\x4f\x9b\xdf\x8a\xed\x1c\xbb\x4e\x54\xc8\x20\x79\x81\x8c\xa2\x5e\x84\xe4\xaa\xdc\xf9\xb1\x1d\x1d\x7a\xb6\x8e\x12\x52\x2f\x7d\xb5\xaf\x98\xf6\x86\x7f\x95\x71\x80\x89\xc6\x87\x14\x3c\x05\x3b\x1f\xca\xde\x5d\x80\xac\x9b\x81\x78\xf4\x2f\xeb\x66\x10\xa4\x84\x78\xbe\x8d\xd0\x90\xef\xd7\xc4\x3a\xb8\x18\x08\x82\xd4\x26\x05\x75\xef\xc5\x72\x9e\x4c\x2b\xc8\xce\x3d\x38\x70\xee\xdd\x6c\xf8\x7e\x17\x0f\xb5\x5f\x11\x1f\xd4\xfd\x4f\x77\x6d\x3a\xb2\xc4\x39\xfa\x30\x63\x1f\xfb\x96\xff\xde\x8b\xdf\x86\x2e\x3d\xcc\x67\x3e\xa6\xd3\xb5\xff\xc4\x17\xd1\x48\x2b\xeb\x86\x12\xc7\xe2\xcb\x0c\x6f\x79\x7f\xfa\x1d\x00\x00\xff\xff\x83\x33\xe8\x32\x8d\x05\x00\x00")

func routerGotmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGotmpl,
		"router.gotmpl",
	)
}

func routerGotmpl() (*asset, error) {
	bytes, err := routerGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router.gotmpl", size: 1421, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client.gotmpl": clientGotmpl,
	"router.gotmpl": routerGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"client.gotmpl": &bintree{clientGotmpl, map[string]*bintree{}},
	"router.gotmpl": &bintree{routerGotmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
