// Code generated by go-bindata.
// sources:
// client.gotmpl
// router.gotmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcd\x6e\xdc\x36\x10\x3e\x4b\x4f\x31\xdd\x43\x22\x19\x32\x75\x77\x91\x43\x91\xf4\x60\x20\xb6\x83\xd6\x7d\x00\x9a\x1a\x69\x59\x53\x33\x32\x7f\xbc\x76\x15\xbd\x7b\x41\x52\x2b\xdb\xf5\x02\x4d\x0e\x82\xc4\x21\x67\xe6\xfb\x19\xb1\x6d\xe1\xcb\x0d\x5c\xdf\xdc\xc2\xef\x5f\x2e\x6f\x2f\xe0\xb3\xd1\x48\x1e\x0e\xd2\xc1\x80\x84\x56\x7a\xec\xa0\xb7\x3c\xc2\xc7\x79\x16\xd7\x72\xc4\x65\xf9\x58\x4e\x52\xdd\xcb\x01\x61\x9e\xc5\xb7\xfc\xb9\x2c\x65\xa9\xc7\x89\xad\x87\xaa\x2c\x76\x8a\xc9\xe3\x93\xdf\x95\xc5\x0e\x49\x71\xa7\x69\x68\xff\x76\x4c\xbb\xb2\x2c\xe4\xc1\x59\x7c\x80\xdd\xa0\xfd\x3e\xdc\x09\xc5\x63\x2b\x0f\x2e\x3e\xe7\xae\xbb\x3f\x1f\x38\x2d\x2d\x3e\x04\x74\xb1\x82\xa6\x47\xbe\x47\xfb\x26\x01\x3b\xe7\xd1\x98\xd6\xc8\xf1\xae\x93\xe7\xeb\x91\xd8\x6e\x60\x1e\x0c\x8a\x81\x8d\xa4\x41\xb0\x1d\xda\xc9\xb2\xe7\xbb\xd0\xb7\x1b\x92\x14\xc9\x70\xea\x72\x9e\xcf\xc1\x4a\x1a\x10\xc4\x9f\x68\x1f\xb5\x4a\x5c\xda\xf6\x28\x85\x76\x20\x5f\x69\xa1\x72\xb4\x67\x0b\x7e\x8f\xe0\x72\x0a\x74\xd8\x6b\xc2\x0e\x34\xbd\x16\x4a\xc4\x3a\x97\x1e\xf0\x69\x62\x87\x0e\x46\xf4\x7b\xee\x1c\x78\x06\x25\x8d\x81\xc9\xb2\xc2\x2e\x58\x74\x20\x1f\xa5\x36\xf2\xce\x20\x30\xbd\xae\xdc\x80\xa4\x0e\xf6\x92\x3a\x83\x2e\x96\x8b\x7b\x51\x7f\x4d\x43\xda\x0a\x74\x5c\x71\x0f\xab\x6a\x2e\xed\x58\x74\x13\x53\xec\x9b\xd0\x5a\x49\x2e\x1a\x24\x4a\xff\x3c\xe1\x46\x8f\x3c\xda\x5e\x2a\x84\xb9\x2c\x5e\x69\x71\x95\xa0\x2e\x4b\x0c\xae\x74\xaa\xd5\x55\xf1\x39\xbf\x1b\x38\x9b\x67\x71\x49\x53\xf0\xb7\xcf\x13\x7e\xb7\x7b\xb7\x2c\x0d\x08\x21\xb2\xc5\xe2\x66\xf2\x9a\xa9\x86\x2a\x9e\xbb\x09\xfe\x3f\x07\xd1\x5a\xb6\x75\xee\x8a\x14\x7b\x65\xe1\xd5\x26\x7c\xe4\x9a\x00\x92\x34\xa0\xc7\xc9\xe0\x88\xe4\x65\xac\x1a\xd9\x66\x0a\x2b\x9f\x35\xcb\x79\x1b\x94\xff\x3f\x32\xdf\x3d\x7f\xe5\x03\xda\x65\x01\x80\xb3\x75\x7c\xc4\x65\x7e\xbf\x47\x74\x8d\x87\x4d\x2e\xed\xb5\x34\xfa\x9f\x68\xd9\x0a\xa0\x01\xc5\xd4\xeb\x21\xd8\xe8\x82\xf6\xd1\xde\xe0\x30\x3b\x65\xf9\x51\x77\xd8\x41\x2c\x13\x68\x94\xd6\xed\xa5\x41\x9b\x2c\x79\xb1\x2e\x49\x91\xe6\x22\x26\xa5\xd5\x09\xbe\xcf\x1c\x2c\xa8\x3d\x6b\x85\xa2\xec\x03\xa9\x17\x60\x95\x86\x23\x8b\xaf\xe9\x9f\x58\xb9\x34\x20\x2d\x45\x51\x34\x0d\xcd\x5b\x00\x81\x54\x15\x7f\x02\xf1\x87\x3c\x5c\xa1\x73\x72\xc0\x7a\xf5\xe4\x38\x1c\x73\x59\x58\xf4\xc1\x12\x7c\xc8\xf2\xce\x65\x71\x5a\xd7\xf7\xc2\x5e\x00\x6c\x90\xae\xf1\x50\xe9\x04\xa5\xd9\x62\xbf\xb9\x6f\xc7\xe9\xaf\x76\xdb\x8c\xed\xde\x80\xac\xeb\x66\x6d\x98\xdd\x28\xa2\x21\xa7\xfa\x67\x35\x2a\x05\x67\x19\x67\x0d\xaf\xa6\xd6\x3f\xc1\xbb\xc9\x8d\x37\xd0\xc9\xe9\xe5\xc9\xbb\x9f\x1d\xe1\xa8\xd3\x24\x9f\x0d\xcb\x2e\x85\xe0\xe2\x13\x6c\x77\x8c\xb8\xca\x6c\x2a\x8b\x0f\x75\x59\xe8\x3e\x9d\xf8\xe5\x13\x90\x36\x31\xf1\xa8\x30\x69\x93\x92\x23\xc9\xc2\xba\x69\xab\xa4\xc4\x3b\x6d\xd7\x49\x8d\xd4\x1a\xd8\x3a\x47\xe8\x42\x88\x1f\x6e\xc2\xc1\xc7\xfa\x1f\x4e\x30\x9b\x97\xad\xc8\x1b\x2e\x7f\x1d\xbd\xa9\x12\x42\x0e\xbe\xfe\xf5\x87\xf8\xe4\x18\x07\xdf\xc4\x8d\xd5\xc5\x6c\xea\xcb\xd7\xbf\x01\x00\x00\xff\xff\xfa\x52\x68\x14\x8d\x06\x00\x00")

func clientGotmplBytes() ([]byte, error) {
	return bindataRead(
		_clientGotmpl,
		"client.gotmpl",
	)
}

func clientGotmpl() (*asset, error) {
	bytes, err := clientGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client.gotmpl", size: 1677, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _routerGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x6e\xdc\x36\x10\x3d\x8b\x5f\x31\xdd\x43\x2c\x05\x0a\xf7\xee\xc0\xa7\x26\x45\x0d\xd4\x76\x91\xb8\xed\xa1\xe8\x81\x92\x46\x12\x1b\x2d\x29\x0f\xa9\x5d\x6f\x15\xfd\x7b\x31\x22\xa5\xdd\xad\x1d\x14\x05\x7a\x30\x4c\xcc\x0e\xdf\x7b\xf3\xe6\x89\xdb\x2d\x7c\x78\x80\xfb\x87\x47\xf8\xf8\xe1\xf6\xf1\x1a\x3e\xd9\xc1\x23\xc1\x41\x39\x68\xd0\x20\x29\x8f\x15\xd4\x64\x77\x70\x35\x8e\xf2\x5e\xed\x70\x9a\xae\x44\xaf\xca\x2f\xaa\x41\x18\x47\xf9\x73\x38\x4e\x93\x10\x7a\xd7\x5b\xf2\x90\x8a\x64\x53\x5a\xe3\xf1\xd9\x6f\x44\xb2\x41\x53\xda\x4a\x9b\x66\xfb\xa7\xb3\x66\x23\x44\x42\x81\x62\xd3\x68\xdf\x0e\x85\x2c\xed\x6e\x8b\x95\xf3\xd8\x75\xdb\x4e\xed\x8a\x4a\xbd\x0b\x1d\x7c\xb9\xb1\xb6\xe9\x50\x36\xb6\x53\xa6\x91\x96\x9a\x6d\x4f\xd6\xdb\x62\xa8\xb7\x2b\xee\x5c\x09\xe0\x99\x18\x47\x52\xa6\x41\x90\x9f\x91\xf6\xba\x64\x5d\xdb\x2d\xdc\xd6\x70\xb4\x03\x01\xe1\xd3\x80\xce\x83\x3f\xf6\xe8\x40\xef\xfa\x0e\x77\x68\x3c\xf8\x16\x61\xaf\x3a\x5d\x29\x6f\x09\xb4\xf1\x48\xb5\x2a\x91\xeb\x47\x38\xe8\xae\x83\x02\x81\x81\x62\x13\x56\x50\x60\x6d\x09\xa1\x40\x6d\x1a\x68\x95\xa9\xb0\x02\x5b\xd7\xe0\xed\x8c\xc6\x95\x0e\x09\x6a\x4b\xd0\x93\x2d\xd1\x39\x6d\x1a\x09\x82\xa9\x5f\xe5\x1a\x45\xf2\x6b\x44\x4f\x33\x40\x22\x4b\x62\x12\x4c\xfa\x63\xc4\xd2\x6e\x86\xc6\x67\xb6\x19\xab\xb3\xbb\x47\x3b\x80\x6b\xed\xd0\x55\xe7\x43\xd9\xa8\x62\x19\xdb\x81\x36\x8c\x37\x5b\xe1\x82\x3f\x32\x08\x5a\x29\xce\xe5\x8c\xe3\x3b\x88\x6e\xde\xa1\x6f\x6d\x35\x4d\x5c\x8c\x29\x48\xe3\x8e\xe5\xf7\xe1\x7f\x0e\x6f\xc7\x51\xde\x9a\x7e\xf0\x8f\xc7\x1e\xbf\x52\xeb\xa6\x29\x83\x94\xab\x0f\x83\xbf\x28\xe7\x61\xbe\x2c\x70\xa0\x61\xe4\x30\xeb\x92\x3f\x52\x7d\x98\xf6\xea\x22\x13\x57\xf9\xf9\xac\xbd\x72\x2e\xde\x90\x61\x02\x1e\x9a\x61\xc2\x25\xf9\xd9\x2b\xf2\x70\x68\xd1\x80\x36\xda\x6b\xd5\xe9\xbf\x78\x5f\xb3\x03\xa1\x07\xea\xc1\x94\x5e\x5b\x13\x9d\x88\x02\x9c\xa7\xa1\xf4\xec\xc2\xdb\xc0\x2c\xc3\x0f\x51\xe6\x3d\x1e\x62\xe3\x8a\x8b\x0e\x14\xc4\x6c\x1f\x5a\x5d\xb6\x21\x38\x73\xe5\xb4\x81\xcb\x78\x30\x54\x4f\x76\xaf\x2b\xac\x24\xdc\xfa\x70\x65\x70\x73\xf2\x60\xa7\xc8\xb5\x8a\xd7\xb2\xf4\xf0\x75\xfe\xf6\x82\x7d\x6e\x4e\x97\x27\x65\x1c\x27\x42\x0a\x1e\xe5\x24\x2d\x5d\x32\x18\x97\x9b\x9f\x01\x72\x67\x1a\x76\x00\xe9\xef\x7f\x14\x47\x8f\xcb\x4e\x32\x78\x1b\x47\x1b\xd7\x6f\xf5\xfa\x26\x4e\x26\xef\xf1\x90\xc6\xe3\x5d\x40\xfb\x38\x4b\xf9\x4d\xfb\x36\x5d\xf1\xb3\xec\x1b\xe9\x39\xf7\x32\xdd\xac\x59\xda\xe4\x10\xcf\x5f\xbd\xfd\xc9\x1e\x90\xa6\x69\x91\x2f\xd7\xae\xec\x22\x2f\x09\xa1\x1f\xc8\xc0\x9b\xa0\x76\x14\x49\x12\x4e\xd7\x51\x6b\x2e\x12\x4e\xd5\x6b\x3a\x82\x53\xdf\xa4\x0c\xf6\xfc\x0f\xf9\xce\x16\xdb\x96\xef\x6b\x5c\x65\x5f\xfe\xf0\x03\x13\x06\x56\xff\x0c\x2f\x98\x09\x9f\x80\x5f\x38\xf9\x49\x1d\xee\xd0\x39\xd5\x60\x06\xe9\x3f\x2a\x0b\x29\x93\x24\x85\xad\x8e\xbc\xb6\x37\x2f\x35\x8f\x93\x48\x12\x5d\x73\x37\x77\xac\xcf\xa7\xfc\xc5\xc4\x05\xa6\x84\x4f\x39\x30\x44\xf6\x7e\x6e\xfb\xee\x06\x8c\xee\x66\xe0\x45\xbf\xd1\xdd\x4c\x28\x92\x84\xf1\xf6\x8a\xa0\x38\x3d\x1f\xe3\x04\x37\x33\x40\xa0\xda\xe7\x60\xbf\x30\x59\x21\xd3\xf5\xed\xcb\xde\x73\x71\xc6\x3c\xa9\xd9\xcb\xd3\x23\xf8\x92\xfb\x15\xf2\x99\x9d\xff\xc8\xf5\xf9\x82\x12\xf7\xc8\x66\xc6\x39\x4e\x23\xff\xfb\x2c\xfc\x35\xb8\xfc\xa5\x3f\x77\x8b\x3b\xae\xff\x4f\x78\xb1\x1a\x61\x8d\xee\x44\x32\x65\x31\x99\x21\xcb\xa7\xd3\xdf\x01\x00\x00\xff\xff\xf5\x8c\xc9\xec\x90\x07\x00\x00")

func routerGotmplBytes() ([]byte, error) {
	return bindataRead(
		_routerGotmpl,
		"router.gotmpl",
	)
}

func routerGotmpl() (*asset, error) {
	bytes, err := routerGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "router.gotmpl", size: 1936, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client.gotmpl": clientGotmpl,
	"router.gotmpl": routerGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"client.gotmpl": &bintree{clientGotmpl, map[string]*bintree{}},
	"router.gotmpl": &bintree{routerGotmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
